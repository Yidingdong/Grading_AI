services:
  web-nginx:
    image: nginx:latest
    container_name: web-nginx
    ports:
      - "8080:80"
    networks:
      - app-network

  mongodb-server:
    image: mongo:latest
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - mongodb-data:/data/db
    networks:
      - app-network

  mysql-server:
    image: mysql:latest
    container_name: mysql-server
    ports:
      - "3306:3306" 
    environment:
      MYSQL_ROOT_PASSWORD: example
      MYSQL_DATABASE: Informations
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - app-network

  registration-service:
    build:
      context: .
      dockerfile: ./register/Dockerfile
    ports:
      - "5000:5000"
    networks:
      - app-network
    depends_on:
      - mysql-server
    command: ["/bin/sh", "-c", "wait-for-it.sh mysql-server:3306 --timeout=60 --strict -- echo 'MySQL is up, starting registration...' && python register.py"]

  course-allocation-service:
    build:
      context: .
      dockerfile: ./course_allocation/Dockerfile
    ports:
      - "5001:5001"
    networks:
      - app-network
    depends_on:
      - mysql-server
    command: ["/bin/sh", "-c", "wait-for-it.sh mysql-server:3306 --timeout=60 --strict -- echo 'MySQL is up, starting course allocation...' && python course_allocation.py"]
  
  pdf-uploader:
    build: ./pdf_to_mongodb
    volumes: 
      - ./pdf_to_mongodb/pdfs:/app/pdfs
    networks:
      - app-network
    depends_on:
      - mongodb-server
volumes:
  mongodb-data:
  mysql-data:

networks:
  app-network:
    driver: bridge