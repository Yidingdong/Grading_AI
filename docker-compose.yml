services:
  web-nginx:
    image: nginx:latest
    container_name: web-nginx
    ports:
      - "8080:80"
    networks:
      - app-network

  mongodb-server:
    image: mongo:latest
    container_name: hlrs-mongodb-server-1
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - mongodb-data:/data/db
    networks:
      - app-network

  mysql-server:
    image: mysql:latest
    container_name: mysql-server
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: example
      MYSQL_DATABASE: Informations
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - app-network

  registration-service:
    build:
      context: .
      dockerfile: ./register/Dockerfile
    container_name: hlrs-registration-service-1
    ports:
      - "5000:5000"
    networks:
      - app-network
    depends_on:
      mysql-server:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 15s
    command: ["/bin/sh", "-c", "wait-for-it.sh mysql-server:3306 --timeout=60 --strict -- echo '[Register Service] MySQL is up, starting registration...' && python register.py"]

  course-allocation-service:
    build:
      context: .
      dockerfile: ./course_allocation/Dockerfile
    container_name: hlrs-course-allocation-service-1
    ports:
      - "5001:5001"
    networks:
      - app-network
    depends_on:
      mysql-server:
        condition: service_started
      registration-service:
        condition: service_healthy
    command: ["/bin/sh", "-c", "wait-for-it.sh mysql-server:3306 --timeout=60 --strict -- echo '[Course Service] MySQL is up, Registration Service is healthy.' && echo '[Course Service] Starting course allocation application...' && python course_allocation.py"]

  pdf-uploader:
    build: ./pdf_to_mongodb
    container_name: hlrs-pdf-uploader-1
    volumes:
      - ./pdf_to_mongodb/pdfs:/app/pdfs
    networks:
      - app-network
    depends_on:
      mongodb-server:
         condition: service_started
    environment:
      - TESSDATA_PREFIX=/usr/share/tesseract-ocr/5/tessdata

  ollama-service:
    build:
      context: .
      dockerfile: ./ollama_service/Dockerfile
    container_name: ollama-ai-server
    ports:
      - "11434:11434"
    volumes:
      - ollama-data:/root/.ollama
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -s -f http://localhost:11434/api/tags || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

volumes:
  mongodb-data:
  mysql-data:
  ollama-data:

networks:
  app-network:
    driver: bridge