services:
  web-nginx:
    image: nginx:latest
    container_name: web-nginx
    ports:
      - "8080:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - app-network
    depends_on:
      - frontend-service

  mongodb-server:
    image: mongo:latest
    container_name: hlrs-mongodb-server-1
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - mongodb-data:/data/db
    networks:
      - app-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  mysql-server:
    image: mysql:latest
    container_name: mysql-server
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: example
      MYSQL_DATABASE: Informations
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost", "-uuser", "-ppassword"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  registration-service:
    build:
      context: .
      dockerfile: ./register/Dockerfile
    container_name: hlrs-registration-service-1
    ports:
      - "5000:5000"
    networks:
      - app-network
    depends_on:
      mysql-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 15s
    command: ["/bin/sh", "-c", "wait-for-it.sh mysql-server:3306 --timeout=60 --strict -- echo '[Register Service] MySQL is up, starting registration...' && python register.py"]

  course-allocation-service:
    build:
      context: .
      dockerfile: ./course_allocation/Dockerfile
    container_name: hlrs-course-allocation-service-1
    ports:
      - "5001:5001"
    networks:
      - app-network
    depends_on:
      mysql-server:
        condition: service_healthy
      registration-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 15s
      timeout: 15s
      retries: 10
      start_period: 45s
    command: ["/bin/sh", "-c", "wait-for-it.sh mysql-server:3306 --timeout=60 --strict -- echo '[Course Service] MySQL is up, Registration Service is healthy.' && echo '[Course Service] Starting course allocation application...' && python course_allocation.py"]

  pdf-processor-service:
    build:
      context: .
      dockerfile: ./pdf_to_mongodb/Dockerfile
    container_name: pdf-processor-app
    ports:
      - "5003:5003"
    networks:
      - app-network
    depends_on:
      mongodb-server:
         condition: service_healthy
    environment:
      - TESSDATA_PREFIX=/usr/share/tesseract-ocr/5/tessdata
      - PYTHONUNBUFFERED=1
      - FLASK_DEBUG=False
      - MONGO_HOST=mongodb-server
      - MONGO_USER_FRONTEND=root
      - MONGO_PASSWORD_FRONTEND=example
      - MONGO_DB_NAME_FRONTEND=grading_ai_frontend
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5003/health || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s

  grading-service:
    build:
      context: .
      dockerfile: ./grading_service/Dockerfile
    container_name: grading-service
    ports:
      - "5002:5002"
    networks:
      - app-network
    depends_on:
      mongodb-server:
        condition: service_healthy
      pdf-processor-service:
        condition: service_healthy
    environment:
      - PYTHONUNBUFFERED=1
      - SEEDBOX_API_BASE_URL=https://api.seedbox.ai/v1
      - SEEDBOX_CHAT_MODEL=gpt-4o-mini
    command: >
      /bin/sh -c "
      wait-for-it.sh mongodb-server:27017 --timeout=60 --strict -- echo '[Grading Service] MongoDB is up.' && \
      wait-for-it.sh pdf-processor-service:5003 --timeout=60 --strict -- echo '[Grading Service] PDF Processor service is up.' && \
      echo '[Grading Service] Starting application...' && \
      python grading_service.py
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 60s
    secrets:
      - apikey

  frontend-service:
    build:
      context: .
      dockerfile: ./Frontend/Dockerfile
    container_name: frontend-app
    networks:
      - app-network
    depends_on:
      mysql-server:
        condition: service_healthy
      mongodb-server:
        condition: service_healthy
      registration-service:
        condition: service_healthy
      course-allocation-service:
        condition: service_healthy
      pdf-processor-service:
        condition: service_healthy
    environment:
      - PYTHONUNBUFFERED=1
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_SERVER_PORT=8501
      - PDF_PROCESSOR_URL=http://pdf-processor-service:5003
    volumes:
      - ./Frontend/src:/app/src

volumes:
  mongodb-data:
  mysql-data:

networks:
  app-network:
    driver: bridge

secrets:
  apikey:
    file: ./secret.txt